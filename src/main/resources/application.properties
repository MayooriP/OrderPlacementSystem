# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/order_system?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

# SQL Initialization
spring.sql.init.mode=embedded
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql
spring.jpa.defer-datasource-initialization=true
spring.sql.init.continue-on-error=true

# Server Configuration
server.port=8080

# Logging Configuration
logging.level.root=INFO
logging.level.com.restaurant.ordersystem=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.file.name=logs/order-system.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# AWS DynamoDB Configuration
aws.dynamodb.table-name=Orders
aws.dynamodb.endpoint=http://localhost:8000
aws.region=us-east-1
# In production, use environment variables or AWS IAM roles instead of hardcoded credentials
# For local development only:
aws.credentials.use-default-chain=true
# aws.accessKey=${AWS_ACCESS_KEY_ID}
# aws.secretKey=${AWS_SECRET_ACCESS_KEY}
