# Database Configuration - Using MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/order_system?useSSL=false&serverTimezone=UTC&createDatabaseIfNotExist=false
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
spring.jpa.properties.hibernate.format_sql=true

# SQL Initialization - Completely disabled as we're using JPA for schema management
spring.sql.init.mode=never
spring.jpa.defer-datasource-initialization=false

# Server Configuration
server.port=8081

# Logging Configuration
logging.level.root=INFO
logging.level.com.restaurant.ordersystem=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.file.name=logs/order-system.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# AWS Common Configuration
spring.cloud.aws.region.static=us-east-1
# AWS Credentials - Using default chain
# spring.cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID:}
# spring.cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY:}

# AWS Service Endpoints
spring.cloud.aws.endpoint=https://amazonaws.com

# Custom AWS Configuration (to be used in application code)
aws.dynamodb.table-name=Orders
aws.s3.bucket-name=restaurant-order-system
aws.sqs.queue-name=order-events
